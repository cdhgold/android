var url =  "";
var file = "";

try
{
    //read file into upfilebytes array
    var upfilebytes = File.ReadAllBytes(file);

    //create new HttpClient and MultipartFormDataContent and add our file, and StudentId
    HttpClient client = new HttpClient();
    MultipartFormDataContent content = new MultipartFormDataContent();
    ByteArrayContent baContent = new ByteArrayContent(upfilebytes);
    StringContent studentIdContent = new StringContent("2123");
    content.Add(baContent, "File", "filename.ext");
    content.Add(studentIdContent, "StudentId");


    //upload MultipartFormDataContent content async and store response in response var
    var response = await client.PostAsync(url, content);

    //read response result as a string async into json var
    var responsestr = response.Content.ReadAsStringAsync().Result;

    //debug
    Debug.WriteLine(responsestr);
}
catch (Exception e)
{
    //debug
    Debug.WriteLine("Exception Caught: " + e.ToString());
    return;
}
==================================
onActivityResult에서 파일을 생성 

// ImageView 에 이미지 출력 
Uri dataUri = data.getData();
InputStream in = getContentResolver().openInputStream(dataUri); 
Bitmap image = BitmapFactory.decodeStream(in); 
imgVwSelected.setImageBitmap(image); in.close();
                 
tempSelectFile = new File(Environment.getExternalStorageDirectory()+"/Camping/Car/", "temp_" + date + ".jpeg"); 
OutputStream out = new FileOutputStream(tempSelectFile); 
image.compress(Bitmap.CompressFormat.JPEG, 100, out);
 				
				
				String boundary = "^-----^";
                String LINE_FEED = "\r\n";
                String charset = "UTF-8";
                OutputStream outputStream;
                PrintWriter writer;

                JSONObject result = null;
                try{

                    URL url = new URL("요청 URL");
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                    connection.setRequestProperty("Content-Type", "multipart/form-data;charset=utf-8;boundary=" + boundary);
                    connection.setRequestMethod("POST");
                    connection.setDoInput(true);
                    connection.setDoOutput(true);
                    connection.setUseCaches(false);
                    connection.setConnectTimeout(15000);

                    outputStream = connection.getOutputStream();
                    writer = new PrintWriter(new OutputStreamWriter(outputStream, charset), true);

                    /** Body에 데이터를 넣어줘야 할경우 없으면 Pass **/
                    writer.append("--" + boundary).append(LINE_FEED);
                    writer.append("Content-Disposition: form-data; name=\"데이터 키값\"").append(LINE_FEED);
                    writer.append("Content-Type: text/plain; charset=" + charset).append(LINE_FEED);
                    writer.append(LINE_FEED);
                    writer.append("데이터값").append(LINE_FEED);
                    writer.flush();

                    /** 파일 데이터를 넣는 부분**/
                    writer.append("--" + boundary).append(LINE_FEED);
                    writer.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + file.getName() + "\"").append(LINE_FEED);
                    writer.append("Content-Type: " + URLConnection.guessContentTypeFromName(file.getName())).append(LINE_FEED);
                    writer.append("Content-Transfer-Encoding: binary").append(LINE_FEED);
                    writer.append(LINE_FEED);
                    writer.flush();

                    FileInputStream inputStream = new FileInputStream(file);
                    byte[] buffer = new byte[(int)file.length()];
                    int bytesRead = -1;
                    while ((bytesRead = inputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    outputStream.flush();
                    inputStream.close();
                    writer.append(LINE_FEED);
                    writer.flush();

                    writer.append("--" + boundary + "--").append(LINE_FEED);
                    writer.close();

                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
                        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        String inputLine;
                        StringBuffer response = new StringBuffer();
                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }
                        in.close();

                        try {
                            result = new JSONObject(response.toString());
                            
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    } else {
                        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                        String inputLine;
                        StringBuffer response = new StringBuffer();
                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }
                        in.close();
                        result = new JSONObject(response.toString());
                    }

                } catch (ConnectException e) {
                    Log.e(TAG, "ConnectException");
                    e.printStackTrace();


                } catch (Exception e){
                    e.printStackTrace();
                }

                return result;
            }

            @Override
            protected void onPostExecute(JSONObject jsonObject) {
                super.onPostExecute(jsonObject);
            }

        }.execute();

 
